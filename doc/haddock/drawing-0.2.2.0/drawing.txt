-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package drawing
@version 0.2.2.0

module Drawing.IO

-- | Write a <a>Drawing</a> to a handle.
hPutSvg :: Handle -> Drawing -> IO ()

-- | Write a <a>Drawing</a> to <tt>stdout</tt>.
putSvg :: Drawing -> IO ()

-- | <i>Deprecated: Use <a>putSvg</a> instead</i>
svgOf :: Drawing -> IO ()

-- | Write a <a>Drawing</a> to a file.
writeSvgFile :: FilePath -> Drawing -> IO ()

module Drawing.Vector

-- | Additive group <tt>v</tt>.
class AdditiveGroup v

-- | The zero element: identity for <a>(^+^)</a>
zeroV :: AdditiveGroup v => v

-- | Add vectors
(^+^) :: AdditiveGroup v => v -> v -> v

-- | Additive inverse
negateV :: AdditiveGroup v => v -> v

-- | Group subtraction
(^-^) :: AdditiveGroup v => v -> v -> v
infixl 6 ^-^
infixl 6 ^+^

-- | Sum over several vectors
sumV :: (Foldable f, AdditiveGroup v) => f v -> v

-- | Vector space <tt>v</tt>.
class AdditiveGroup v => VectorSpace v where {
    type family Scalar v :: Type;
}

-- | Scale a vector
(*^) :: VectorSpace v => Scalar v -> v -> v
infixr 7 *^

-- | Vector divided by scalar
(^/) :: (VectorSpace v, s ~ Scalar v, Fractional s) => v -> s -> v

-- | Vector multiplied by scalar
(^*) :: (VectorSpace v, s ~ Scalar v) => v -> s -> v

-- | Inner product space <tt>v</tt>.
class (VectorSpace v, AdditiveGroup (Scalar v)) => InnerSpace v

-- | Inner/dot product
(<.>) :: InnerSpace v => v -> v -> Scalar v
infixr 7 <.>

-- | Square of the length of a vector. Sometimes useful for efficiency. See
--   also <a>magnitude</a>.
magnitudeSq :: (InnerSpace v, s ~ Scalar v) => v -> s

-- | Length of a vector. See also <a>magnitudeSq</a>.
magnitude :: (InnerSpace v, s ~ Scalar v, Floating s) => v -> s

-- | Vector in same direction as given one but with length of one. If given
--   the zero vector, then return it.
normalized :: (InnerSpace v, s ~ Scalar v, Floating s) => v -> v
instance Drawing.Vector.InnerSpace GHC.Types.Double
instance (Drawing.Vector.InnerSpace u, s GHC.Types.~ Drawing.Vector.Scalar u, Drawing.Vector.InnerSpace v, s GHC.Types.~ Drawing.Vector.Scalar v) => Drawing.Vector.InnerSpace (u, v)
instance (Drawing.Vector.InnerSpace u, s GHC.Types.~ Drawing.Vector.Scalar u, Drawing.Vector.InnerSpace v, s GHC.Types.~ Drawing.Vector.Scalar v, Drawing.Vector.InnerSpace w, s GHC.Types.~ Drawing.Vector.Scalar w) => Drawing.Vector.InnerSpace (u, v, w)
instance Drawing.Vector.InnerSpace a => Drawing.Vector.InnerSpace [a]
instance Drawing.Vector.VectorSpace GHC.Types.Double
instance (Drawing.Vector.VectorSpace u, s GHC.Types.~ Drawing.Vector.Scalar u, Drawing.Vector.VectorSpace v, s GHC.Types.~ Drawing.Vector.Scalar v) => Drawing.Vector.VectorSpace (u, v)
instance (Drawing.Vector.VectorSpace u, s GHC.Types.~ Drawing.Vector.Scalar u, Drawing.Vector.VectorSpace v, s GHC.Types.~ Drawing.Vector.Scalar v, Drawing.Vector.VectorSpace w, s GHC.Types.~ Drawing.Vector.Scalar w) => Drawing.Vector.VectorSpace (u, v, w)
instance Drawing.Vector.VectorSpace a => Drawing.Vector.VectorSpace [a]
instance Drawing.Vector.AdditiveGroup GHC.Types.Int
instance Drawing.Vector.AdditiveGroup GHC.Types.Double
instance (Drawing.Vector.AdditiveGroup u, Drawing.Vector.AdditiveGroup v) => Drawing.Vector.AdditiveGroup (u, v)
instance (Drawing.Vector.AdditiveGroup u, Drawing.Vector.AdditiveGroup v, Drawing.Vector.AdditiveGroup w) => Drawing.Vector.AdditiveGroup (u, v, w)
instance Drawing.Vector.AdditiveGroup a => Drawing.Vector.AdditiveGroup [a]

module Drawing
data Drawing

-- | A point on the x-y plane.
type Point = (Double, Double)
data Color
type TextAnchor = Text

-- | A blank drawing, with nothing in it.
blank :: Drawing

-- | A sequence of line segments, with given endpoints.
polyline :: forall f. Foldable f => f Point -> Drawing

-- | A thin polygon with these points as vertices.
polygon :: forall f. Foldable f => f Point -> Drawing

-- | A solid polygon with these points as vertices.
solidPolygon :: forall f. Foldable f => f Point -> Drawing
rectangle :: Double -> Double -> Drawing
solidRectangle :: Double -> Double -> Drawing
circle :: Double -> Drawing
solidCircle :: Double -> Drawing

-- | <pre>
--   text s = atext middleAnchor s
--   </pre>
text :: Text -> Drawing
atext :: TextAnchor -> Text -> Drawing

-- | A coordinate plane. Adding this to your pictures can help you measure
--   distances more accurately.
--   
--   Example:
--   
--   <pre>
--   main = putSvg (coordinatePlane &lt;&gt; myPicture)
--   myPicture = ...
--   </pre>
coordinatePlane :: Drawing

-- | A drawing drawn with this color.
colored :: Color -> Drawing -> Drawing

-- | A drawing translated by the given x and y coordinates.
--   
--   <pre>
--   translated dx dy = transform (translation (dx, dy))
--   </pre>
translated :: Double -> Double -> Drawing -> Drawing

-- | A drawing scaled by the given x and y factors. Scaling by a negative
--   factor also reflects across that axis.
--   
--   <pre>
--   scaled sx sy = transform (scaling sx sy)
--   </pre>
scaled :: Double -> Double -> Drawing -> Drawing

-- | A drawing scaled uniformly by the given factor. Dilating by a negative
--   factor also reflects across the origin.
--   
--   <pre>
--   dilated s = scaled s s
--   </pre>
dilated :: Double -> Drawing -> Drawing

-- | A drawing rotated by this angle about the origin.
--   
--   Angles are in radians.
--   
--   <pre>
--   rotated a = transform (rotation a)
--   </pre>
rotated :: Double -> Drawing -> Drawing

-- | <pre>
--   xSkewed a = transform (skewX a)
--   </pre>
xSkewed :: Double -> Drawing -> Drawing

-- | <pre>
--   ySkewed a = transform (skewY a)
--   </pre>
ySkewed :: Double -> Drawing -> Drawing
white :: Color
black :: Color
gray :: Color
red :: Color
green :: Color
lime :: Color
blue :: Color
yellow :: Color
orange :: Color
brown :: Color
fromRGB :: Double -> Double -> Double -> Color
fromHSL :: Double -> Double -> Double -> Color
toRGB :: Color -> (Double, Double, Double)
toHSL :: Color -> (Double, Double, Double)
hue :: Color -> Double
saturation :: Color -> Double
luminosity :: Color -> Double
lighter :: Double -> Color -> Color
light :: Color -> Color
dark :: Color -> Color
brighter :: Double -> Color -> Color
bright :: Color -> Color
dull :: Color -> Color
startAnchor :: TextAnchor
middleAnchor :: TextAnchor
endAnchor :: TextAnchor

-- | An associative operation.
--   
--   <pre>
--   &gt;&gt;&gt; [1,2,3] &lt;&gt; [4,5,6]
--   [1,2,3,4,5,6]
--   </pre>
(<>) :: Semigroup a => a -> a -> a
infixr 6 <>

-- | An affine transformation.
--   
--   An affine transformation is any transformation that preserves
--   collinearity (i.e., all points lying on a line initially still lie on
--   a line after transformation) and ratios of distances (e.g., the
--   midpoint of a line segment remains the midpoint after transformation).
--   An affine transformation is also called an affinity.
data Transform

-- | A translation by the given distance vector.
translation :: (Double, Double) -> Transform

-- | A scaling by the given x and y factors. Scaling by a negative factor
--   also reflects across that axis.
scaling :: Double -> Double -> Transform

-- | An uniformly scaling by the given factor. Dilating by a negative
--   factor also reflects across the origin.
--   
--   <pre>
--   dilated s = scaled s s
--   </pre>
dilation :: Double -> Transform

-- | A rotation by the given angle about the origin. Angles are in radians.
rotation :: Double -> Transform
skewX :: Double -> Transform
skewY :: Double -> Transform

-- | Apply an affine transformation to a drawing.
transform :: Transform -> Drawing -> Drawing

-- | Apply an affine transformation to a point.
transformPoint :: Transform -> Point -> Point

-- | Apply the linear part of an affine transformation (that's a linear
--   tranformation, ignoring the translation part) to a vector.
transformVector :: Transform -> (Double, Double) -> (Double, Double)

-- | A simple drawing CGI program.
drawingOf :: Double -> Double -> Drawing -> IO ()

-- | A CGI program which shows an animation, with a picture for each time
--   given by the parameter.
animationOf :: Double -> Double -> (Time -> Drawing) -> IO ()

-- | An interactive CGI program that responds to Events. Activities can
--   interact with the user, change over time, and remember information
--   about the past.
activityOf :: Double -> Double -> a -> (Event -> a -> a) -> (a -> Drawing) -> IO ()
splitTime :: Time -> (Time -> a -> a) -> Time -> a -> a
data Event
KeyDown :: !Text -> Event
KeyUp :: !Text -> Event
MouseDown :: !Point -> Event
MouseUp :: !Point -> Event
MouseMove :: !Point -> Event

-- | The argument is the time in seconds since the previous
--   <a>TimePassing</a> event.
TimePassing :: !Time -> Event
type Time = Double
